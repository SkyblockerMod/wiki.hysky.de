---
import type { Props } from '@astrojs/starlight/props';
import Default from '@astrojs/starlight/components/SiteTitle.astro';
import { Icon } from '@astrojs/starlight/components';

//const isBlog = Astro.locals.starlightRoute.id.startsWith('blog')
const curLocale = Astro.props.locale;
const isBlog = Astro.props.id.startsWith(`${curLocale ? `${curLocale}/` : ''}blog`);

const { t } = Astro.locals;

type Link = {
	title: string;
	value: string;
	transfer: boolean;
};

const links: Link[] = [
	{
		title: `üõ†Ô∏è ${t('menu.mod.title')}`,
		value: '/mod/',
		transfer: true,
	},
	{
		title: `üì¶Ô∏è ${t('menu.modpack.title')}`,
		value: '/modpack/',
		transfer: true,
	},
	{
		title: `üë®‚Äçüíª ${t('menu.contributor.title')}`,
		value: '/contribute/',
		transfer: false,
	}
];
const rootpathurl = curLocale ? "/"+curLocale+"/mod" : "/mod"
---

<>
  <Default {...Astro.props} siteTitleHref={rootpathurl}><slot /></Default>

  <starlight-select class="mobile">
    {!isBlog && (
      <>
        <label for="menu-select"></label>
        <select id="menu-select" class="menu">
          <option value="" disabled selected>{t('menu.label')}</option>
          {
            links.map((link) => (
              <option
                value={link.transfer && curLocale ? `/${curLocale}${link.value}` : link.value}
                set:html={link.title}
              />
            ))
          }
          <option disabled>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</option>
          <option value={`/${curLocale ? `${curLocale}/` : ''}blog`}>üì∞ {t('menu.blog.title')}</option>
        </select>
        <Icon name="down-caret" class="icon caret" />
      </>
    )}
  </starlight-select>
</>

<script>
  class StarlightLanguageSelect extends HTMLElement {
    constructor() {
      super();
      const select = this.querySelector('select');
      if (select) {
        select.addEventListener('change', (e) => {
          if (e.currentTarget instanceof HTMLSelectElement) {
            window.location.pathname = e.currentTarget.value;
          }
        });
      }
    }
  }
  customElements.define('starlight-select', StarlightLanguageSelect);
</script>

<style>
  .desktop {
    display: none;
    align-items: center;
    gap: 1rem;
    padding-inline-start: 1rem;
  }
  @media (min-width: 50rem) and (max-width: 55rem) {
    .menu {
      text-align: center;
    }
  }
  @media (min-width: 72rem) {
    .desktop {
      display: flex;
    }
    .mobile {
      display: none;
    }
  }

  a {
    color: var(--sl-color-white);
    font-weight: 600;
    text-decoration: none;
  }

  label {
    --sl-label-icon-size: 0.875rem;
    --sl-caret-size: 1.25rem;
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    color: var(--sl-color-gray-1);
  }

  label:hover {
    color: var(--sl-color-gray-2);
  }

  .icon {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
  }

  .label-icon {
    font-size: var(--sl-label-icon-size);
    inset-inline-start: 0;
  }

  .caret {
    font-size: var(--sl-caret-size);
    inset-inline-end: 0;
  }

  select {
    border: 0;
    padding-block: 0.625rem;
    padding-inline: calc(var(--sl-label-icon-size) + 0.25rem) calc(var(--sl-caret-size) + 0.25rem);
    width: var(--sl-select-width);
    background-color: transparent;
    text-overflow: ellipsis;
    color: inherit;
    cursor: pointer;
    appearance: none;
  }

  option {
    background-color: var(--sl-color-bg-nav);
    color: var(--sl-color-gray-1);
  }

  @media (min-width: 50rem) {
    select {
      font-size: var(--sl-text-sm);
    }
  }
  starlight-select {
    margin-left: auto;
  }
</style>
